package jsp.common.util;

import java.sql.*;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

public class DBConnection {
		
		    

		/*
		 * 사용한 자원 반납하기 ( Objects such as Connection, PreparedStatement, and ResultSet used to connect to the DB must return resources after use. 
		 * 생성된 역순으로 반납 You must return the resource after use, so write a method to return the resource.
		 * These methods are used to release resources after executing queries.
		 */
		    
		    //freeConnection, is used when a select query is executed and a result set is used.
		    public void freeConnection(Connection conn, PreparedStatement pstmt, ResultSet rs) {//select일때     
		        try {
		            if(rs !=null) rs.close(); //Both methods close the prepared statement and connection if they're not null. 
		            if(pstmt !=null) pstmt.close();
		            if(conn !=null) conn.close();
		        } catch (Exception e) {
		            e.printStackTrace(); //They also handle exceptions by printing the stack trace.
		        }
		    }
		    
		    //freeConnection, is used for queries that don't produce a result set (such as INSERT, UPDATE, DELETE).
		    //PreparedStatement 동적쿼리에서 사용(권장사항) SELECT * FROM member WHERE id=?
		    public void freeConnection(Connection conn, PreparedStatement pstmt) {//INSERT|UPDATE|DELETE
		        try {
		            if(pstmt !=null) pstmt.close();
		            if(conn !=null) conn.close();
		        } catch (Exception e) {
		            e.printStackTrace();
		        }
		    }

		    
		 
	
	
				/*Overall, this class manages database connections and resource cleanup using the Singleton pattern and handles potential exceptions with try-catch blocks. It provides methods to establish connections, execute queries, and release resources.
				 * 연결된 상태인지 아닌지 확인 -> 연결 상태 확인되면 close
				private static boolean isConnection(Connection con) {
					boolean valid = true;
					
					try {
						if(con == null || con.isClosed()) {
							valid = false;
						}
			
					} catch (SQLException e) {
						valid = true;
						e.printStackTrace();
					}
					return valid;
				}
				
				
				//연결된 상태인지 아닌지 확인 -> 연결 상태 확인되면 close
				public static void close(Connection con) {
					if(isConnection(con)) {
						try {
							con.close();
						}catch(SQLException e) {
							e.printStackTrace();
						}
					}
				}
				
				
				//stmt가 null  아닐때 close
				public static void close(Statement stmt) {
					if(stmt !=null) {
						try {
							stmt.close();
						} catch (SQLException e) {
							e.printStackTrace();
						}
					}
				}
				
				//rs가 null 아닐때 close
				public static void close(ResultSet rs) {
					if(rs != null) {
						try {
							rs.close();
						}catch(SQLException e) {
							e.printStackTrace();
						}
					}
				}
					
				//연결 상태라면 commit
				public static void commit(Connection con) {
					if(isConnection(con)) {
						try {
							con.commit();
						} catch(SQLException e) {
							e.printStackTrace();
						}
					}
				}
				
				//연결상태라면 rollback
				public static void rollback(Connection con) {
					if(isConnection(con)) {
						try {
							con.rollback();
						}catch (SQLException e) {
							e.printStackTrace();
						}
					}
				}*/
}
	

