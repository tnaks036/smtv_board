/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.79
 * Generated at: 2023-08-30 08:11:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class BoardWriteForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>글 작성 페이지 Posting form for bulletin boards</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("		#btn{\r\n");
      out.write("			margin-top: 20px;\r\n");
      out.write("		}\r\n");
      out.write("	</style>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		function checkValue() {\r\n");
      out.write("			/* boardForm 태그 선택 */\r\n");
      out.write("			const form = document.boardForm;\r\n");
      out.write("			/* boardForm의 boardSubject, boardContent 값 가져오기 */\r\n");
      out.write("			const subject = form.boardSubject.value;\r\n");
      out.write("			const content = form.boardContent.value;\r\n");
      out.write("			\r\n");
      out.write("			/* 값이 없으면 */\r\n");
      out.write("			if(!subject) \r\n");
      out.write("			{\r\n");
      out.write("				alert(\"제목을 입력해주세요.\");\r\n");
      out.write("				return false;\r\n");
      out.write("			} \r\n");
      out.write("			else if(!content) \r\n");
      out.write("			{\r\n");
      out.write("				alert(\"내용을 입력해주세요.\");\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		/* 취소 버튼 클릭 시 */\r\n");
      out.write("		function goToList() {\r\n");
      out.write("			/* 게시판 목록으로 돌아가기  */\r\n");
      out.write("			location.href = \"BoardListAction.bo\";\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("        <link href=\"css/navbar-top-fixed.css\" rel=\"stylesheet\">\r\n");
      out.write("    \r\n");
      out.write("    <!-- CSS FILES -->\r\n");
      out.write("    <!-- CSS FILES -->        \r\n");
      out.write("        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("        \r\n");
      out.write("        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("\r\n");
      out.write("        <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@500;600;700&family=Open+Sans&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("                        \r\n");
      out.write("        <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("        <link href=\"css/bootstrap-icons.css\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("        <link href=\"css/templatemo-topic-listing.css\" rel=\"stylesheet\">    \r\n");
      out.write("        <!--\r\n");
      out.write("TemplateMo 590 topic listing\r\n");
      out.write("https://templatemo.com/tm-590-topic-listing\r\n");
      out.write("        -->\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("			<form method=\"post\" action=\"BoardWriteAction.bo\" name=\"boardForm\" enctype=\"multipart/form-data\" onsubmit=\"return checkValue()\">\r\n");
      out.write("				<!-- memberID 파라미터 전달 용 숨은 input태그 , hidden xxxxx-->\r\n");
      out.write("				<!-- <input type=\"hidden\" name=\"boardID\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.memberID}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">  -->\r\n");
      out.write("				<!-- 제목 -->\r\n");
      out.write("				<div class=\"input-group\">\r\n");
      out.write("					<span class=\"input-group-text\" id=\"inputGroup-sizing-default\">제목</span>\r\n");
      out.write("					<input name=\"boardSubject\" type=\"text\" class=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-default\">\r\n");
      out.write("				</div>\r\n");
      out.write("				<!-- 첨부파일 -->\r\n");
      out.write("				<div class=\"input-group mb-3\">\r\n");
      out.write("					<input name=\"boardFile\" type=\"file\" class=\"form-control\" id=\"inputGroupFile02\">\r\n");
      out.write("					<label class=\"input-group-text\" for=\"inputGroupFile02\">Upload</label>\r\n");
      out.write("				</div>\r\n");
      out.write("				<!-- 내용 -->\r\n");
      out.write("				<div class=\"input-group\">\r\n");
      out.write("					<span class=\"input-group-text\">내용</span>\r\n");
      out.write("					<textarea name=\"boardContent\" class=\"form-control\" aria-label=\"With textarea\" rows=\"20\"></textarea>\r\n");
      out.write("				</div>\r\n");
      out.write("				<!-- 등록/취소 버튼  -->\r\n");
      out.write("				<div id=\"btn\" class=\"d-grid gap-2 d-sm-flex justify-content-sm-center\">\r\n");
      out.write("					<input type=\"submit\" class=\"btn btn-primary btn-sm px-3 gap-3\" value=\"등록\"></button>\r\n");
      out.write("					<input type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3\" value=\"취소\" onclick=\"goToList()\"></input>\r\n");
      out.write("				</div>\r\n");
      out.write("			</form>\r\n");
      out.write("		</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
